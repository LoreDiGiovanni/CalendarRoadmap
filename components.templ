package main

import (
    "RoadmapCalendar/types"
)

templ Layout(route string) {
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RCalendar</title>
    <script src="static/js/htmx.min.js"></script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script src="https://unpkg.com/htmx.org/dist/ext/json-enc.js"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <link href="static/css/styles.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons"/>
</head>

<body class="font-mono bg-[#282c34] w-full" >
    <main id="view" hx-swap="innerHTML" hx-get={route} hx-trigger="load" ></main>
</body>

</html>
}


templ Fail(){
    <div class="text-center">
        <h1 class="text-6xl font-bold text-red-500 mb-4">404</h1>
        <p class="text-2xl">Page Not Found</p>
    </div>
}

templ Home(e *[]types.Events, current string) {
 <div id="home" class="flex flex-col ">
    <div id="bar" class="flex flex-row items-center">
        <i class="material-icons text-white ml-4">menu</i>
        <h1 class="text-xl text-white font-bold ml-3">{current}</h1>
    </div>
    <div id="events" class="flex flex-col mt-48 h-screen w-screen items-center">
        @Roadmap(*e)
    </div>
 </div>
}

templ InputEventPlaceholder(){
    <div hx-swap="outerHTML" hx-trigger="click" hx-get="/component/eventadder" class="cursor-pointer">
        <div class="flex flex-row items-center space-x-2 pb-1">
            <div class="w-3 h-3 border border-gray-500 rounded-full bg-gray-500 "></div>
            <div class="bg-white rounded-full pl-1 pr-1 h-3 w-20"></div>
            <div class="bg-black rounded-full pl-1 pr-1 h-4 w-14"></div>
        </div>
        <div class="border-l-2 border-gray-500 content-start p-4 ml-1 mb-1 space-y-2">
            <div class="bg-white rounded-full pl-1 pr-1 h-3 w-50"></div>
            <div class="bg-white rounded-full pl-1 pr-1 h-3 w-48"></div>
            <div class="bg-white rounded-full pl-1 pr-1 h-2 w-20"></div>
        </div>
    </div>
}

templ InputEvent(){
    <form  id="input_event" hx-ext="json-enc" > 
        <input id="dot_color" name="dot_color" type="hidden" value="#6b7280"/>
        <div class="flex flex-row items-center space-x-2 ">
            <div id="dot" class="shrink-0 w-3 h-3 border border-gray-500 rounded-full bg-gray-500"></div>

            <input type="text" id="title" name="title" 
                placeholder="Add title..."
                class=" font-semibold text-xl border-none bg-transparent text-white focus:outline-none"/>

            <input type="date" id="date" name="date" 
                class="text-sm bg-black rounded-full text-white focus:outline-none"/>
        </div>
        <div class="border-l-2 border-gray-500 content-start p-4 ml-1 mb-1 space-y-2">
            <textarea id="notes" name="notes" 
                placeholder="Add notes..."
                class="resize-y break-words border-none bg-transparent text-white w-full focus:outline-none "/>
                <div class="flex flex-row space-x-2">
                    @ColorsButton()        
                    <button 
                        type="submit" 
                        class="px-1 rounded-full bg-white"
                        hx-post="/events"
                        hx-swap="outerHTML"
                        hx-target="#input_event">
                        Add
                    </button>
                    </div>
        </div>
    </form>
}

templ Roadmap(e []types.Events) {
    <div id="roadmap"  
         class="flex flex-col w-1/3" 
         hx-trigger="roadmapChange from:body"
         hx-get="/component/roadmap"
         hx-swap="outerHTML">
    <div class="border-l-2 border-gray-500 p-4 ml-1 mb-1"></div>
        for _, item := range e{
            <div class="flex flex-row items-center space-x-2">
                <div id={item.ID +"dot"}
                    class="shrink-0 w-3 h-3 border border-gray-500 rounded-full bg-gray-500"></div>
                @changeColor(item.Dot_color,item.ID+"dot")
                <p class="font-semibold text-xl text-white" > {item.Title} </p>
                <p class="text-slate-200 text-sm bg-black rounded-full pl-1 pr-1">{item.Date}</p>
            </div>
            <div class="border-l-2 border-gray-500 content-start p-4 ml-1 mb-1">
                <div class="text-white">@templ.Raw(item.Notes)</div>
                <p class="italic text-slate-200 text-xs">from {item.Time_start} to {item.Time_end}</p>
                <div class="flex flex-row space-x-2 mt-1"> 
                    for _, tag := range item.Tags{
                        @EventTag(tag)
                    }
                </div>
            </div> 
        }
        @InputEventPlaceholder()
    </div>
}

templ DropDownColors(colors []types.Color){
    <div id="color_menu" class="flex flex-row w-1/2 items-center">
    <button onclick={scrollYList(-20,"color_list")}
            class="shrink-0 bg-white h-5 w-7 rounded-l-lg justify-content items-center">
        @MaterialIcon("scale-50","arrow_back_ios")
    </button> 

    <div id="color_list" class="no-scrollbar flex flex-row items-center bg-white space-x-1 overflow-x-scroll ">
        for _, item := range colors{
                <div id={item.Name} 
                    onclick={changeColorAndSet(item.Code,"dot","dot_color")} 
                    hx-get="/component/colorsbutton"
                    hx-swap="outerHTML"
                    hx-target="#color_menu"
                    hx-trigger="click"
                    class=" justify-center shrink-0 border h-5 w-5 rounded-full cursor-pointer"></div> 
                    @changeColor(item.Code,item.Name)
        }
    </div> 

    
    <button onclick={scrollYList(20,"color_list")}
        class=" shrink-0 bg-white h-5 w-7 rounded-r-lg justify-content items-center">
        @MaterialIcon("scale-50  mb-2","arrow_forward_ios")
    </button> 
    </div>
    

}


templ EventTag(tag string){
    <div class="px-1 test-xs bg-white rounded-full">{tag}</div> 
}

templ ColorsButton(){
    <button class="rounded-full bg-white px-1"
            hx-get="/component/dropdowncolors" 
            hx-swap="outerHTML">Colors</button>
}

script changeColor(color string, id string) {
            const dot = document.getElementById(id);
            dot.style.backgroundColor = color;
            dot.style.borderColor = color;
}
script changeColorAndSet(color string, id string, varid string) {
            const dot = document.getElementById(id);
            dot.style.backgroundColor = color;
            dot.style.borderColor = color;
            const color_var = document.getElementById(varid);
            color_var.value = color
}

templ MaterialIcon(class string,name string){
    <i class={"material-icons",class}>
        {name} 
    </i>
}

script scrollYList(amount int,id string) {
    var container = document.getElementById(id);
    container.scrollBy({
        left: amount,
        behavior: 'smooth'
    });
}

templ Empty(){
    
}

templ dialoguebox(){

<!-- Modal trigger -->
  <div>
    <label for="tw-modal" class="cursor-pointer rounded-full bg-black text-xs px-1 py-1 text-white">OPEN MODAL</label>
  </div>

  <!-- Hidden toggle -->
  <input type="checkbox" id="tw-modal" class="peer fixed appearance-none opacity-0"/>

  <!-- Modal -->
  <label for="tw-modal" class="pointer-events-none invisible fixed inset-0 flex cursor-pointer items-center justify-center overflow-hidden overscroll-contain bg-slate-700/70 opacity-0 transition-all duration-200 ease-in-out peer-checked:pointer-events-auto peer-checked:visible peer-checked:opacity-100 peer-checked:translate-y-0 peer-checked:scale-100">

    <!-- Modal box -->
    <div class="overscroll-contain rounded-md bg-white p-6 text-black shadow-2xl transition max-h-(calc(100vh-5em)) h-fit max-w-lg scale-90 overflow-y-auto">
      <h3 class="text-lg font-bold">Colors</h3>
    </div>
  </label>
}


